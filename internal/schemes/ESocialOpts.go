// Code generated by options-gen. DO NOT EDIT.
package schemes

import (
	"encoding/xml"
	fmt461e464ebed9 "fmt"

	errors461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/errors"
	validator461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/validator"
)

type OptESocialSetter[E any] func(o *ESocial[E])

func NewESocial[E any](
	options ...OptESocialSetter[E],
) ESocial[E] {
	o := ESocial[E]{}

	// Setting defaults from field tag (if present)

	for _, opt := range options {
		opt(&o)
	}
	return o
}

func WithESocialXMLName[E any](opt xml.Name) OptESocialSetter[E] {
	return func(o *ESocial[E]) {
		o.XMLName = opt

	}
}

func WithESocialNamespace[E any](opt string) OptESocialSetter[E] {
	return func(o *ESocial[E]) {
		o.Namespace = opt

	}
}

func WithESocialEvento[E any](opt *E) OptESocialSetter[E] {
	return func(o *ESocial[E]) {
		o.Evento = opt

	}
}

func (o *ESocial[E]) Validate() error {
	errs := new(errors461e464ebed9.ValidationErrors)
	errs.Add(errors461e464ebed9.NewValidationError("Namespace", _validate_ESocial_Namespace[E](o)))
	errs.Add(errors461e464ebed9.NewValidationError("Evento", _validate_ESocial_Evento[E](o)))
	return errs.AsError()
}

func _validate_ESocial_Namespace[E any](o *ESocial[E]) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.Namespace, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `Namespace` did not pass the test: %w", err)
	}
	return nil
}

func _validate_ESocial_Evento[E any](o *ESocial[E]) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.Evento, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `Evento` did not pass the test: %w", err)
	}
	return nil
}
